// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =============================================================================
// CORE MODELS
// =============================================================================

model User {
  id                  String         @id @default(uuid())
  username            String         @unique
  email               String?        @unique
  phoneNumber         String?        @unique
  passwordHash        String
  profilePictureUrl   String?
  createdAt           DateTime       @default(now())
  // Relations
  measurements        Measurements?
  wardrobe            Piece[]
  posts               Post[]
  followers           Follows[]      @relation("Following")
  following           Follows[]      @relation("Follower")
  sessions            Session[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

model Measurements {
  id                String   @id @default(uuid())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @unique
  gender            Gender?
  heightCm          Int?
  weightKg          Int?
  shoulderWidthCm   Int?
  chestCm           Int?
  underbustCm       Int?
  waistCm           Int?
  backLengthCm      Int?
  upperbodyLength   Int?
  hipsCm            Int?
  armLengthCm       Int?
  upperArmCm        Int?
  inseamCm          Int?
  thighCm           Int?
  shoeSizeEu        Int?
  footWidthCm       Int?
}

model Piece {
  id         String        @id @default(uuid())
  owner      User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
  name       String?
  category   PieceCategory
  imageUrl   String
  size       String?
  createdAt  DateTime      @default(now())
  // Relations
  posts      PostPiece[]
}

// =============================================================================
// SOCIAL & COMMUNITY MODELS
// =============================================================================

model Post {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  caption   String?
  createdAt DateTime    @default(now())
  // Relations
  pieces    PostPiece[]
}

// Junction table to link multiple pieces to a single post (Many-to-Many)
model PostPiece {
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String
  piece   Piece  @relation(fields: [pieceId], references: [id], onDelete: Cascade)
  pieceId String

  @@id([postId, pieceId])
}

// Junction table for the follower/following relationship (Many-to-Many)
model Follows {
  follower    User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@id([followerId, followingId])
}

// =============================================================================
// ENUMS
// =============================================================================

enum Gender {
  MALE
  FEMALE
  DIVERSE
  PREFER_NOT_TO_SAY
}

enum PieceCategory {
  T_SHIRT
  SHIRT
  SWEATER
  HOODIE
  JACKET
  PANTS
  SHORTS
  SHOES
  ACCESSORY
  OTHER
}
